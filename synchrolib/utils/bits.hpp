#pragma once
#include <synchrolib/utils/general.hpp>

namespace synchrolib {

template <typename T>
constexpr bool IS_POWER2(T v) {
  return !((v) & ((v)-1));
}

template <uint A, uint N>
struct POWER {
  enum { v = A * POWER<A, N - 1>::v };
};

template <uint A>
struct POWER<A, 1> {
  enum { v = A };
};

constexpr static uint POWERS2_32[] = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512,
    1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288,
    1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728,
    268435456, 536870912, 1073741824, 2147483648U};

constexpr static uint POWERS2M1_32[] = {0, 1, 3, 7, 15, 31, 63, 127, 255, 511,
    1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287,
    1048575, 2097151, 4194303, 8388607, 16777215, 33554431, 67108863, 134217727,
    268435455, 536870911, 1073741823, 2147483647U};

constexpr static uint64 POWERS2_64[] = {1ULL, 2ULL, 4ULL, 8ULL, 16ULL, 32ULL,
    64ULL, 128ULL, 256ULL, 512ULL, 1024ULL, 2048ULL, 4096ULL, 8192ULL, 16384ULL,
    32768ULL, 65536ULL, 131072ULL, 262144ULL, 524288ULL, 1048576ULL, 2097152ULL,
    4194304ULL, 8388608ULL, 16777216ULL, 33554432ULL, 67108864ULL, 134217728ULL,
    268435456ULL, 536870912ULL, 1073741824ULL, 2147483648ULL, 4294967296ULL,
    8589934592ULL, 17179869184ULL, 34359738368ULL, 68719476736ULL,
    137438953472ULL, 274877906944ULL, 549755813888ULL, 1099511627776ULL,
    2199023255552ULL, 4398046511104ULL, 8796093022208ULL, 17592186044416ULL,
    35184372088832ULL, 70368744177664ULL, 140737488355328ULL,
    281474976710656ULL, 562949953421312ULL, 1125899906842624ULL,
    2251799813685248ULL, 4503599627370496ULL, 9007199254740992ULL,
    18014398509481984ULL, 36028797018963968ULL, 72057594037927936ULL,
    144115188075855872ULL, 288230376151711744ULL, 576460752303423488ULL,
    1152921504606846976ULL, 2305843009213693952ULL, 4611686018427387904ULL,
    9223372036854775808ULL};
constexpr static uint64 POWERS2M1_64[] = {0ULL, 1ULL, 3ULL, 7ULL, 15ULL, 31ULL,
    63ULL, 127ULL, 255ULL, 511ULL, 1023ULL, 2047ULL, 4095ULL, 8191ULL, 16383ULL,
    32767ULL, 65535ULL, 131071ULL, 262143ULL, 524287ULL, 1048575ULL, 2097151ULL,
    4194303ULL, 8388607ULL, 16777215ULL, 33554431ULL, 67108863ULL, 134217727ULL,
    268435455ULL, 536870911ULL, 1073741823ULL, 2147483647ULL, 4294967295ULL,
    8589934591ULL, 17179869183ULL, 34359738367ULL, 68719476735ULL,
    137438953471ULL, 274877906943ULL, 549755813887ULL, 1099511627775ULL,
    2199023255551ULL, 4398046511103ULL, 8796093022207ULL, 17592186044415ULL,
    35184372088831ULL, 70368744177663ULL, 140737488355327ULL,
    281474976710655ULL, 562949953421311ULL, 1125899906842623ULL,
    2251799813685247ULL, 4503599627370495ULL, 9007199254740991ULL,
    18014398509481983ULL, 36028797018963967ULL, 72057594037927935ULL,
    144115188075855871ULL, 288230376151711743ULL, 576460752303423487ULL,
    1152921504606846975ULL, 2305843009213693951ULL, 4611686018427387903ULL,
    9223372036854775807ULL, 18446744073709551615ULL};

// bit utils (http://graphics.stanford.edu/~seander/bithacks.html)

__attribute__((pure)) inline uint count_bits32(uint v) {
  v = v - ((v >> 1) & 0x55555555);
  v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
  return (((v + (v >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
}

__attribute__((pure)) inline uint count_bits64(uint64 v) {
  v = v - ((v >> 1) & (uint64) ~(uint64)0 / 3);
  v = (v & (uint64) ~(uint64)0 / 15 * 3) +
      ((v >> 2) & (uint64) ~(uint64)0 / 15 * 3);
  v = (v + (v >> 4)) & (uint64) ~(uint64)0 / 255 * 15;
  return (uint64)(v * ((uint64) ~(uint64)0 / 255)) >> (sizeof(uint64) - 1) * 8;
  // return __builtin_popcountll(s);
}

__attribute__((const)) inline uint64 reverse32(uint64 v) {
  v = ((v >> 1) & 0x5555555555555555) | ((v & 0x5555555555555555) << 1);
  v = ((v >> 2) & 0x3333333333333333) | ((v & 0x3333333333333333) << 2);
  v = ((v >> 4) & 0x0F0F0F0F0F0F0F0F) | ((v & 0x0F0F0F0F0F0F0F0F) << 4);
  v = ((v >> 8) & 0x00FF00FF00FF00FF) | ((v & 0x00FF00FF00FF00FF) << 8);
  v = (v >> 16) | (v << 16);
  return v;
}

__attribute__((const)) inline uint64 reverse64(uint64 v) {
  v = ((v >> 1) & 0x5555555555555555) | ((v & 0x5555555555555555) << 1);
  v = ((v >> 2) & 0x3333333333333333) | ((v & 0x3333333333333333) << 2);
  v = ((v >> 4) & 0x0F0F0F0F0F0F0F0F) | ((v & 0x0F0F0F0F0F0F0F0F) << 4);
  v = ((v >> 8) & 0x00FF00FF00FF00FF) | ((v & 0x00FF00FF00FF00FF) << 8);
  v = ((v >> 16) & 0x0000FFFF0000FFFF) | ((v & 0x0000FFFF0000FFFF) << 16);
  v = (v >> 32) | (v << 32);
  return v;
}

}  // namespace synchrolib
